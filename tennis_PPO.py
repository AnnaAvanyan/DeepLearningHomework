# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1L-43w3YZBva-Bl_MpvZbrDBbNB4gPkln
"""

!pip install gym[atari]
!pip install gym[atari] gym[accept-rom-license]

!pip install ale_py

!pip install pyvirtualdisplay
!apt-get install -y xvfb

!pip install gym[atari] stable-baselines3 shimmy>=2.0 --upgrade

import gym
import torch
import torch.nn as nn
import torch.optim as optim
import collections
import numpy as np
from torch.utils.tensorboard import SummaryWriter
from gym.wrappers import RecordVideo

from google.colab import drive
drive.mount('/content/drive')
VIDEO_SAVE_PATH = "/content/drive/MyDrive/tennis_videos/"

from pyvirtualdisplay import Display
import gym  # Use gym instead of gymnasium
from stable_baselines3 import PPO
from stable_baselines3.common.vec_env import DummyVecEnv
import cv2
import numpy as np

# Mount Google Drive
from google.colab import drive
drive.mount('/content/drive')


ENV_NAME = "ALE/Tennis-v5"
VIDEO_SAVE_PATH = "/content/drive/MyDrive/tennis_videos/tennis_video.mp4"
MODEL_SAVE_PATH = "/content/drive/MyDrive/tennis_videos/tennis_model.zip"

env = gym.make(ENV_NAME, render_mode='rgb_array')

env = DummyVecEnv([lambda: env])

model = PPO('MlpPolicy', env, verbose=1)

model.learn(total_timesteps=100000)
model.save(MODEL_SAVE_PATH)

obs = env.reset()
done = False

frames = []

for i in range(100000):
    action, _states = model.predict(obs)
    obs, reward, done, info = env.step(action)

    frame = env.render(mode='rgb_array')
    if frame is not None:
        frames.append(frame)

# Convert the frames into a video
if len(frames) > 0:
    frame_height, frame_width, _ = frames[0].shape
    fourcc = cv2.VideoWriter_fourcc(*'mp4v')
    out = cv2.VideoWriter(VIDEO_SAVE_PATH, fourcc, 30.0, (frame_width, frame_height))  # 30 FPS

    # Write each frame to the video file
    for frame in frames:
        out.write(frame)

    # Release the video writer and close everything
    out.release()
else:
    print("No frames captured!")

# Close the environment and stop the virtual display after the simulation is done
env.close()